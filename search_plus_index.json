{"./":{"url":"./","title":"Introduction","keywords":"","body":"1. Introduction1. Introduction XS Zhao®Stay Foolish, Stay HungryCopyright © hansonzhao007 all right reserved, powered by aleen42modified at 2018-05-30 10:25:25 0 issues reported "},"content/linux/cpu.html":{"url":"content/linux/cpu.html","title":"cpu","keywords":"","body":"1. 查看 CPU cache1. 查看 CPU cache **[terminal] **[prompt hanson@u30@20:54:02]**[path ~]**[delimiter $ ]**[command ls /sys/devices/system/cpu/cpu0/cache/] index0 index1 index2 index3 power uevent **[prompt hanson@u30@20:54:02]**[path ~]**[delimiter $ ]**[command cat /sys/devices/system/cpu/cpu0/cache/index0/level] 1 **[prompt hanson@u30@20:54:02]**[path ~]**[delimiter $ ]**[command cat /sys/devices/system/cpu/cpu0/cache/index0/type] Data **[prompt hanson@u30@20:54:02]**[path ~]**[delimiter $ ]**[command cat /sys/devices/system/cpu/cpu0/cache/index0/size] 32K sudo lshw -C memory 打印所有 cache 信息 lscpu 列出 CPU 信息 getconf -a 列出所有系统配置信息（包括 cache line size 信息） x86info -c：display x86 CPU diagnostics lstopo: 可视化 cache 信息 sudo dmidecode -t cache: 打印出包括 cache 类型的所有信息 关于 /sys/devices/system/cpu/cpu0/cache/index*的[解释](https://patchwork.kernel.org/patch/5003041/) cat /proc/cpuinfo: 打印 CPU 信息 cpuid: 打印出所有的 CPU 信息，特别全(cache TLB ...) XS Zhao®Stay Foolish, Stay HungryCopyright © hansonzhao007 all right reserved, powered by aleen42modified at 2018-08-14 10:00:08 0 issues reported "},"content/linux/disk.html":{"url":"content/linux/disk.html","title":"disk","keywords":"","body":"1. 格式化磁盘2. 挂载1. 格式化磁盘 sudo mkfs.ext3 /dev/sda6 把该设备格式化成ext3文件系统 sudo mke2fs -j /dev/sda6 把该设备格式化成ext3文件系统。 sudo mkfs.ext2 /dev/sda6 把该设备格式化成ext2文件系统。 sudo mke2fs /dev/sda6 把该设备格式化成ext2文件系统。 sudo mkfs.reiserfs /dev/sda6 把该设备格式化成reiserfs文件系统。 sudo mkfs.vfat /dev/sda6 把该设备格式化成fat32文件系统。 sudo mkfs.msdos /dev/sda6 把该设备格式化成fat16文件系统,msdos文件系统就是fat16。 sudo mkdosfs /dev/sda6 把该设备格式化成fat16文件系统，同mkfs.msdos sudo mkswap /dev/sda6 把该设备格式化成swap文件系统 2. 挂载 mount：直接输出所有的盘符挂载情况 mount [-t type] device dir: 将device挂载到目录dir上。如果dir是已经存在的有内容的目录，那么新挂载的盘会暂时替换原有的内容，这时候只需要使用命令 umount卸载disk即可。 XS Zhao®Stay Foolish, Stay HungryCopyright © hansonzhao007 all right reserved, powered by aleen42modified at 2018-08-14 09:51:48 0 issues reported "},"content/linux/inode.html":{"url":"content/linux/inode.html","title":"inode","keywords":"","body":" `ls -i`：显示文件的inode `stat filename`：显示文件的所有状态信息，包括大小，inode id，link 数目，创建时间，修改时间等 如果有一个文件名很奇怪，无法使用正常的 rm 命令删除，比如：“ab* 那么可以使用 find . -inum xxxx -delete 命令删除 ln file1 filelink1：给file1创建一个名字叫做filelink1的hard link，具有相同的 inode id。加上参数 -s 则创建 softlink **[terminal] **[prompt mac@macs-MacBook]**[path ~]**[delimiter $ ]**[command ls -i] 4304576742 main.cpp **[prompt mac@macs-MacBook]**[path ~]**[delimiter $ ]**[command ln main.cpp t.c] **[prompt mac@macs-MacBook]**[path ~]**[delimiter $ ]**[command ls -i] 4304576742 main.cpp 4304576742 t.c df -i：查看磁盘inode资源的使用情况 XS Zhao®Stay Foolish, Stay HungryCopyright © hansonzhao007 all right reserved, powered by aleen42modified at 2018-08-08 05:41:57 0 issues reported "},"content/linux/network.html":{"url":"content/linux/network.html","title":"network","keywords":"","body":"1. remote port scan2. ip scan3. dhcp1. remote port scan # signle port nc -zv 127.0.0.1 80 # multiple ports nc -zv 127.0.0.1 22 80 8080 # range of ports nc -zv 127.0.0.1 22 20-30 2. ip scan nmap -sP 10.0.0.* 3. dhcp hanson@u41@11:52:06:/etc/netctl ls eno1 examples hooks interfaces hanson@u41@11:52:07:/etc/netctl cat eno1 Description='A basic dhcp ethernet connection' Interface=eno1 Connection=ethernet IP=dhcp #Address=('129.107.116.236/23') #Gateway='129.107.116.1' #DNS=('129.107.35.89') #IP6=no #DHCPClient=dhcpcd #DHCPReleaseOnStop=no ## for DHCPv6 #IP6=dhcp #DHCP6Client=dhclient ## for IPv6 autoconfiguration #IP6=stateless systemctl restart dhcpcd.service XS Zhao®Stay Foolish, Stay HungryCopyright © hansonzhao007 all right reserved, powered by aleen42modified at 2018-10-30 00:53:42 0 issues reported "},"content/linux/perf.html":{"url":"content/linux/perf.html","title":"perf","keywords":"","body":"1. 使用 Perf 分析指定函数的性能并可视化1.1. 使用的两个脚本1.1.1. sperf1.1.2. perfsvg1.2. 在函数内设置性能分析锚点1.3. 性能分析1.4. 生成可视图1. 使用 Perf 分析指定函数的性能并可视化 1.1. 使用的两个脚本 1.1.1. sperf #!/bin/bash if [[ $# -eq 0 ]]; then echo \" Usage: sperf ...\" exit 0 fi perf record -q --call-graph lbr --switch-output -- \"$@\" 1.1.2. perfsvg #!/bin/bash if [[ $# -eq 0 ]]; then echo \" Usage: perfsvg ...\" exit 0 fi # get scripts ghroot=\"https://raw.githubusercontent.com/brendangregg/FlameGraph/master\" bindir=\"${HOME}/program/usr/bin\" st1=\"${bindir}/stackcollapse-perf.pl\" st2=\"${bindir}/flamegraph.pl\" if [[ ! -f \"${st1}\" ]]; then mkdir -p ~/program/usr/bin wget \"${ghroot}/stackcollapse-perf.pl\" -O \"${st1}\" fi if [[ ! -f \"${st2}\" ]]; then mkdir -p ~/program/usr/bin wget \"${ghroot}/flamegraph.pl\" -O \"${st2}\" fi rid=$(timestamp) pref=\"/tmp/.fperf-${rid}\" perf script -i \"${1}\" > ${pref}.perf perl -w \"${st1}\" ${pref}.perf > ${pref}.folded perl -w \"${st2}\" ${pref}.folded > fperf-${rid}.svg rm -f ${pref}.perf ${pref}.folded echo \"fperf-${rid}.svg 1.2. 在函数内设置性能分析锚点 static pid_t __perf_pid = 0; void debug_perf_ppid(void) { const pid_t ppid = getppid(); char tmp[1024]; sprintf(tmp, \"/proc/%d/cmdline\", ppid); FILE * const fc = fopen(tmp, \"r\"); const size_t nr = fread(tmp, 1, 1020, fc); fclose(fc); // look for \"perf record\" if (nr 0) kill(__perf_pid, SIGUSR2); } void debug_perf_stop(void) { if (__perf_pid > 0) kill(__perf_pid, SIGINT); } 1.3. 性能分析 #include \"road_hc_util.h\" #include \"road_sample.h\" #include #include #include #include using namespace rasi; MutableS2ShapeIndex road_index; const double kRepeat = 500000; static pid_t __perf_pid = 0; void debug_perf_ppid(void) { const pid_t ppid = getppid(); char tmp[1024]; sprintf(tmp, \"/proc/%d/cmdline\", ppid); FILE * const fc = fopen(tmp, \"r\"); const size_t nr = fread(tmp, 1, 1020, fc); fclose(fc); // look for \"perf record\" if (nr 0) kill(__perf_pid, SIGUSR2); } void debug_perf_stop(void) { if (__perf_pid > 0) kill(__perf_pid, SIGINT); } vector> initial() { // std::ifstream file(\"../GPS_2016_11_01\"); // CSVRow row; LoadRoadIndex(road_index, \"../shenzhen_split_edges.json\"); vector> samples(2); for(auto& s : samples) { s = pair{23.028605, 114.8476}; } return samples; } void near(vector>& samples){ S2ClosestEdgeQuery::Options options; options.set_max_edges(1); S2ClosestEdgeQuery query(&road_index,options); S2ClosestEdgeQuery::PointTarget target_edge(S2Point(S2LatLng::FromDegrees(samples[0].first, samples[0].second))); auto started = std::chrono::high_resolution_clock::now(); debug_perf_switch(); for (int i = 0; i (done-started).count()/kRepeat > samples = initial(); near(samples); std::cout 1.4. 生成可视图 对生成的 perf.data 文件，使用命令： perfsvg perf.data.2018071020563854 XS Zhao®Stay Foolish, Stay HungryCopyright © hansonzhao007 all right reserved, powered by aleen42modified at 2018-07-11 10:19:06 0 issues reported "},"content/linux/ssh.html":{"url":"content/linux/ssh.html","title":"ssh","keywords":"","body":"1. 内网穿透1.1. Transparent Multi-Hop1.2. ProxyCommand with -W1.3. Local Port Forwarding2. VPN 代理2.1. How to use a SOCKS Proxy 端口转发3. Kill all old ssh connection4. List old ssh1. 内网穿透 # --------------- --------------- ------------------- # | SSH client |==========| Jump host |----------| Target server | # --------------- --------------- ------------------- # WAN IP:129.107.35.245 LAN IP:10.0.0.30 1.1. Transparent Multi-Hop reference # 相当于 SSH client 链接到 Jump host 以后，再从 Jump host ssh 链接到 Target server # 有多少次跳转就要输入多少次密码 ssh -A -t hanson@129.107.35.245 ssh -A -t hanson@10.0.0.30 1.2. ProxyCommand with -W # 该方法需要在 Jump host 和 Target server 上的.ssh目录中的 authorized_keys # ----------------------------------------------------------------- # 1. proxy server configuration # ----------------------------------------------------------------- Host jump_host hostname 129.107.35.245 user hanson # ----------------------------------------------------------------- # 2. Set Jump host proxy # ----------------------------------------------------------------- Host uhead Host u30 HostName 10.0.0.30 ProxyCommand ssh -q -W %h:%p uhead user hanson # 之后直接在 SSH client 上 ssh u30 就可以登录到 Target server 了。 1.3. Local Port Forwarding # 该方法需要在 Jump host 上运行下面的 ssh 命令，然后 SSH client 在指定的端口进行 # ssh 链接，才能访问到 Target server. 该方法并不需要添加 public key，只要用户密码 # 需要注意的是，在`本机的 authorized_key` 里面必须把`自己的 ssh public key 添加进去`。 # 1.run command in Jump host: ssh -2fnNT -L 129.107.35.245:8888:10.0.0.30:22 # Then we can see a port forwarding thread: # [hanson@uhead ~]$ ss -tnl # LISTEN 0 128 129.107.35.245:8888 0.0.0.0:* # 2.ssh Jump host with specified port in SSH client ssh xxz1499@129.107.35.245 -p 8888 xxz1499@129.107.35.245 password: # After login, we are in Target server. # 该方法的好处是：比如我在 Target server 新建了 N 个学生账户，那么并不需要修改 Host server， # 在 SSH client 处登录时候，只需要修改相应的 user name 即可。 2. VPN 代理 2.1. How to use a SOCKS Proxy 端口转发 # ssh -D # ================== # 1. 本地机器配置 # a) 在本地创建 ssh key，然后在 server 端添加该 key。比如 hanson user 的 key # b) 在本地设置 ssh 转发 tunnel。下面相当于把对本地 9999 端口的访问转发到了翻墙服务器上 # # -D: Tells SSH that we want a SOCKS tunnel on the specified port number (you can choose a number between 1025-65536) # -f: Forks the process to the background # -C: Compresses the data before sending it # -q: Uses quiet mode # -N: Tells SSH that no command will be sent once the tunnel is up # ================== ssh -2fnNT -D 9999 hanson@141.217.24.182 # ================== # 2. 在 firefox 里面设置 proxy # Manual proxy configuration: # SOCKS Host: localhost Port:9999 # ================== 3. Kill all old ssh connection kill $(who -la | grep old | grep -o '\\bold *[0-9]*' | grep -o '[0-9]*') 4. List old ssh who -la XS Zhao®Stay Foolish, Stay HungryCopyright © hansonzhao007 all right reserved, powered by aleen42modified at 2018-09-13 09:17:20 0 issues reported "},"content/linux/skills.html":{"url":"content/linux/skills.html","title":"skills","keywords":"","body":"1. rename 重命名2. 批量创建用户3. Batch grading4. 批量 grade homework5. DD 命令创建U盘启动盘6. Compile kernel6.1. prepare6.2. compile6.3. change bootloader1. rename 重命名 # 这里使用 cut 命令截取文件名中想要的一段字符，然后再尾部添加 .s 共同构成新的文件名。 for name in *.s do # 取出第 11 到 17 的字符，并和 \".s\" 拼接在一起 newname=\"$(echo \"$name\" | cut -c 11-17)\".s mv \"$name\" \"$newname\" done 使用指定变量名： # 从 var 变量名的右边开始匹配，并删除 pattern 匹配的部分 # var: task1.c # ${var%.c}: 去除 \".c\" 后缀 ${var%pattern} 2. 批量创建用户 newusers batchuserfile # batchuserfile # pw_name:pw_passwd:pw_uid:pw_gid:pw_gecos:pw_dir:pw_shell phc8166:phc8166::::/stu/phc8166:/bin/bash tvd6298:tvd6298::::/stu/tvd6298:/bin/bash sxg8183:sxg8183::::/stu/sxg8183:/bin/bash rxs9961:rxs9961::::/stu/rxs9961:/bin/bash axs7268:axs7268::::/stu/axs7268:/bin/bash kxt4593:kxt4593::::/stu/kxt4593:/bin/bash safal:safal::::/stu/safal:/bin/bash 3. Batch grading test=(\"Saving correctly!\" \"file1.txt file2.txt merged_file.txt\" \"append.txt 2 line1 line2\") i=0 for src in *.c; do printf \"************ task $((i + 2)) ************\\n\" gcc -w $src ./a.out 4. 批量 grade homework test=(\"2 a 100 b 90\" \"3 1 2 3\" \"3 4 5 6\" \"5 1 2 3 4 5\" \" 4 1 2 3 4 3\") i=0 for src in *.c; do printf \"************ task $((i + 2)) ************\\n\" gcc -w $src ./a.out 5. DD 命令创建U盘启动盘 diskutil list: 输出挂载 U 盘信息 diskutil umountDisk disk4: 卸载U盘 使用dd命令将下载的Ubuntu Linux镜像恢复到U盘上。一定注意不要把磁盘写错了。不然哭死。 sudo dd if=/Users/sky/Downloads/ISO/ubuntu-17.10-desktop-amd64.iso of=/dev/disk4 bs=50m # mac brew install coreutils sudo gdd if=Downloads/archlinux-2018.10.01-x86_64\\(1\\).iso of=/dev/disk2 status=progress 完整的输出信息： ~ % diskutil umountDisk disk4 Unmount of all volumes on disk4 was successful ~ % sudo dd if=/Users/sky/Downloads/ISO/ubuntu-17.10-desktop-amd64.iso of=/dev/disk4 status=\"progress\" Password: 1431+1 records in 1431+1 records out 1501102080 bytes transferred in 906.101477 secs (1656660 bytes/sec) 6. Compile kernel 6.1. prepare sudo apt update sudo apt install bison flex sudo apt install build-essential sudo apt install libncurses5-dev sudo apt install fakeroot libssl-dev sudo apt install libelf-dev # go to linux source folder # copy config file to current folder cp /boot/config-$(uname -r) .config make menuconfig # 打开可视化菜单 # 选择 load→OK→Save→OK→EXIT→EXIT 6.2. compile # compile iso sudo make -j32 # compile modules make modules -j32 # install modules make modules_install # install kernel make install 6.3. change bootloader sudo update-grub XS Zhao®Stay Foolish, Stay HungryCopyright © hansonzhao007 all right reserved, powered by aleen42modified at 2018-10-16 04:37:04 0 issues reported "},"content/web/gitbook.html":{"url":"content/web/gitbook.html","title":"Gitbook","keywords":"","body":"1. Install & initial a gitbook1.1. Install Gitbook1.2. Install gulp and yarn1.3. Using plugin2. Using gulp2.1. Compress html2.2. One example2.3. Publish static website to github pages3. 安装插件1. Install & initial a gitbook 1.1. Install Gitbook npm install -g gitbook-cli git init gitbook-test cd gitbook-test gitbook init 1.2. Install gulp and yarn npm install -g gulp npm install -g yarn npm install --save gulp-htmlmin # used to compress html yarn add gulp gulp-gh-pages gulp-load-plugins --dev # used to publish static page to github yarn init # this will create package.json file 1.3. Using plugin create book.json file. { \"root\": \"./\", // web root directory \"title\": \"cheatsheet\", \"author\": \"XS Zhao\", \"plugins\": [\"prism\", \"-highlight\", \"addcssjs\", \"anchor-navigation-ex\" ], // the plugin you want to use \"pluginsConfig\": { \"addcssjs\": { \"js\": [\"./custom/my.js\"], \"css\": [\"./custom/my.css\"] } } } in the plugins fields, add the plugins your want. Then gitbook install mac@macs-MacBook  ~/Project/test  gitbook install info: installing 3 plugins using npm@3.9.2 info: info: installing plugin \"prism\" info: install plugin \"prism\" (*) from NPM with version 2.3.0 fetchMetadata → network ▀ ╢███████████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░╟ 2. Using gulp Create a new file called gulpfile.js. 2.1. Compress html reference Add following code in gulpfile.js: var gulp = require('gulp'); var htmlmin = require('gulp-htmlmin'); // Compress the html gulp.task('minify', function() { return gulp.src('./_book/**/*.html') .pipe(htmlmin({collapseWhitespace: true})) .pipe(gulp.dest('./_book/')); }); usage: gulp minify 2.2. One example /* npm install 超时请使用：(两条命令在当前文件目录下执行) npm config set registry https://registry.npm.taobao.org npm install 或者： npm install -g cnpm --registry=https://registry.npm.taobao.org cnpm install */ var gulp = require('gulp'); var debug = require('gulp-debug'); var cleancss = require('gulp-clean-css'); //css压缩组件 var cssversion = require('gulp-make-css-url-version'); //css资源添加版本号 var uglify = require('gulp-uglify'); //js压缩组件 var htmlmin = require('gulp-htmlmin'); //html压缩组件 var htmlclean = require('gulp-htmlclean'); //html清理组件 var image = require('gulp-image'); //图片压缩 var assetRev = require('gulp-asset-rev'); //版本控制插件 var runSequence = require('run-sequence'); //异步执行组件 var changed = require('gulp-changed'); //文件更改校验组件 var gulpif = require('gulp-if') //任务 帮助调用组件 var plumber = require('gulp-plumber'); //容错组件（发生错误不跳出任务，并报出错误内容） var isScriptAll = true; //是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件) var isDebug = true; //是否调试显示 编译通过的文件 // 压缩js文件 gulp.task('compressJs', function () { var option = { // preserveComments: 'all',//保留所有注释 mangle: true, //类型：Boolean 默认：true 是否修改变量名 compress: true //类型：Boolean 默认：true 是否完全压缩 } return gulp.src(['./public/**/*.js','!./public/**/*.min.js']) //排除的js .pipe(gulpif(!isScriptAll, changed('./public'))) .pipe(gulpif(isDebug,debug({title: 'Compress JS:'}))) .pipe(plumber()) .pipe(uglify(option)) //调用压缩组件方法uglify(),对合并的文件进行压缩 .pipe(gulp.dest('./public')); //输出到目标目录 }); // 压缩css文件 gulp.task('compressCss', function () { return gulp.src('./public/**/*.css') .pipe(gulpif(!isScriptAll, changed('./public'))) .pipe(gulpif(isDebug,debug({title: 'Compress CSS:'}))) .pipe(plumber()) .pipe(cleancss({rebase: false})) .pipe(gulp.dest('./public')); }); // 压缩图片 gulp.task('compressImage', function () { gulp.src('./public/**/*.png') .pipe(image()) .pipe(gulp.dest('./public')); }); // 压缩html文件 gulp.task('compressHtml', function () { var cleanOptions = { protect: //g, //忽略处理 unprotect: /]*\\btype=\"text\\/x-handlebars-template\"[\\s\\S]+?/ig //特殊处理 } var minOption = { collapseWhitespace: true, //压缩HTML collapseBooleanAttributes: true, //省略布尔属性的值 ==> removeEmptyAttributes: true, //删除所有空格作属性值 ==> removeScriptTypeAttributes: true, //删除的type=\"text/javascript\" removeStyleLinkTypeAttributes: true,//删除和的type=\"text/css\" removeComments: true, //清除HTML注释 minifyJS: true, //压缩页面JS minifyCSS: true, //压缩页面CSS minifyURLs: true //替换页面URL }; return gulp.src('./public/**/*.html') .pipe(gulpif(isDebug,debug({title: 'Compress HTML:'}))) .pipe(plumber()) .pipe(htmlclean(cleanOptions)) .pipe(htmlmin(minOption)) .pipe(gulp.dest('./public')); }); // 默认任务 gulp.task('default', function () { runSequence.options.ignoreUndefinedTasks = true; runSequence('compressHtml','compressCss','compressImage'); //,'compressJs'); }); 2.3. Publish static website to github pages reference Add following code: const gulp = require('gulp'); const gulpLoadPlugins = require('gulp-load-plugins'); const $ = gulpLoadPlugins(); // Publishes the site to GitHub Pages gulp.task('publish', () => { console.log('Publishing to GH Pages'); return gulp.src('./_book/**/*') .pipe($.ghPages({ origin: 'origin', branch: 'gh-pages' })); }); usage: gulp publish 3. 安装插件 插件推荐 XS Zhao®Stay Foolish, Stay HungryCopyright © hansonzhao007 all right reserved, powered by aleen42modified at 2018-08-08 05:56:11 0 issues reported "},"content/vim.html":{"url":"content/vim.html","title":"Vim","keywords":"","body":"1. ctags1. ctags 安装版本应该是 exuberant ctags # 从当前目录递归生成ctag ctags -R * # 在vim里设置 set tags=./tags,tags;$HOME # 从当前目录搜索 ctags 文件，直到 home 目录。 XS Zhao®Stay Foolish, Stay HungryCopyright © hansonzhao007 all right reserved, powered by aleen42modified at 2018-11-02 23:12:26 0 issues reported "}}