{"./":{"url":"./","title":"Introduction","keywords":"","body":"1. Introduction1. Introduction XS Zhao®Stay Foolish, Stay HungryCopyright © hansonzhao007 all right reserved, powered by aleen42modified at 2018-05-30 10:25:25 0 issues reported "},"content/git/skills.html":{"url":"content/git/skills.html","title":"skills","keywords":"","body":"1. 创建 local git server1.1. 在 server 上创建名为 git 的用户1.2. 创建一个空的仓库1.3. 连接本地 project1. 创建 local git server 1.1. 在 server 上创建名为 git 的用户 useradd -m git su git cd mkdir .ssh && chmod 700 .ssh touch .ssh/authorized_keys && chmod 600 .ssh/authorized_key 然后将你自己的电脑的 public key 复制到 authorized_key 里面。 1.2. 创建一个空的仓库 cd mkdir yourprojectname.git cd yourprojectname.git git init --bare Initialized empty Git repository in /home/git/yourprojectname.git/ 1.3. 连接本地 project $ cd myproject $ git init $ git add . $ git commit -m 'initial commit' $ git remote add origin git@gitserver:/home/git/yourprojectname.git $ git push origin master XS Zhao®Stay Foolish, Stay HungryCopyright © hansonzhao007 all right reserved, powered by aleen42modified at 2018-12-05 07:06:29 0 issues reported "},"content/linux/cmake.html":{"url":"content/linux/cmake.html","title":"cmake","keywords":"","body":"1. Introduction2. Using CMake with executables3. Building4. Building library5. Reference1. Introduction CMake is a cross-platform build system generator. Projects specify their build process with platform-independent CMake listfiles included in each directory of a source tree with the name CMakeLists.txt. Users build a project by using CMake to generate a build system for a native tool on their platform. 2. Using CMake with executables Lets assume we have a simple app with a single .c file. We by creating a CMakeLists.txt file in the root of our project. cmake_minimum_required(VERSION 2.8) project(app_project) add_executable(myapp main.c) install(TARGETS myapp DESTINATION bin) add_executable: defines our binary with all linked source files. (针对 c/cpp 文件，生成可执行 bin 文件) install: tells cmake to install our binary into the bin directory of the install directory. 3. Building CMake supports out-of-source builds — so all our compiled code goes into a directory separate to the sources. To start a build we create a new folder: mkdir _build cd _build And call cmake with the path to the project’s root (in this case the parent folder): cmake .. By default cmake will install our build into the system directories. To define a custom install directory we simply pass -DCMAKE_INSTALL_PREFIX to cmake: cmake .. -DCMAKE_INSTALL_PREFIX=../_install To run the build script you can simply use the Makefile: make make install We can now run our binary from the install directory: ../_install/bin/myapp If we wanted to use a different generator we pass it to cmake using the -G parameter: cmake .. -GXcode 4. Building library Building our own library. Use add_library. cmake_minimum_required(VERSION 2.8) project(libtest_project) add_library(test STATIC test.c) install(TARGETS test DESTINATION lib) install(FILES test.h DESTINATION include) CMake will build the library as libtest.a and install it into lib folder of the install directory. 5. Reference Useful variables CMake Community Wiki CMake by Example Minimal CMake Example Share this page Learn X in Y minutes XS Zhao®Stay Foolish, Stay HungryCopyright © hansonzhao007 all right reserved, powered by aleen42modified at 2018-11-24 06:57:28 0 issues reported "},"content/linux/cpu.html":{"url":"content/linux/cpu.html","title":"cpu","keywords":"","body":"1. 查看 CPU cache1. 查看 CPU cache **[terminal] **[prompt hanson@u30@20:54:02]**[path ~]**[delimiter $ ]**[command ls /sys/devices/system/cpu/cpu0/cache/] index0 index1 index2 index3 power uevent **[prompt hanson@u30@20:54:02]**[path ~]**[delimiter $ ]**[command cat /sys/devices/system/cpu/cpu0/cache/index0/level] 1 **[prompt hanson@u30@20:54:02]**[path ~]**[delimiter $ ]**[command cat /sys/devices/system/cpu/cpu0/cache/index0/type] Data **[prompt hanson@u30@20:54:02]**[path ~]**[delimiter $ ]**[command cat /sys/devices/system/cpu/cpu0/cache/index0/size] 32K sudo lshw -C memory 打印所有 cache 信息 lscpu 列出 CPU 信息 getconf -a 列出所有系统配置信息（包括 cache line size 信息） x86info -c：display x86 CPU diagnostics lstopo: 可视化 cache 信息 sudo dmidecode -t cache: 打印出包括 cache 类型的所有信息 关于 /sys/devices/system/cpu/cpu0/cache/index*的[解释](https://patchwork.kernel.org/patch/5003041/) cat /proc/cpuinfo: 打印 CPU 信息 cpuid: 打印出所有的 CPU 信息，特别全(cache TLB ...) XS Zhao®Stay Foolish, Stay HungryCopyright © hansonzhao007 all right reserved, powered by aleen42modified at 2018-08-14 10:00:08 0 issues reported "},"content/linux/disk.html":{"url":"content/linux/disk.html","title":"disk","keywords":"","body":"1. 格式化磁盘2. Disk Command3. 挂载4. fio5. mount tmpfs6. 关闭 ext4 journal7. IO 监控7.1. 系统 IO 监控7.1.1. 注: 各统计量之间关系7.1.2. 总结:7.2. 进程 IO1. 格式化磁盘 sudo mkfs.ext3 /dev/sda6 把该设备格式化成ext3文件系统 sudo mke2fs -j /dev/sda6 把该设备格式化成ext3文件系统。 sudo mkfs.ext2 /dev/sda6 把该设备格式化成ext2文件系统。 sudo mke2fs /dev/sda6 把该设备格式化成ext2文件系统。 sudo mkfs.reiserfs /dev/sda6 把该设备格式化成reiserfs文件系统。 sudo mkfs.vfat /dev/sda6 把该设备格式化成fat32文件系统。 sudo mkfs.msdos /dev/sda6 把该设备格式化成fat16文件系统,msdos文件系统就是fat16。 sudo mkdosfs /dev/sda6 把该设备格式化成fat16文件系统，同mkfs.msdos sudo mkswap /dev/sda6 把该设备格式化成swap文件系统 2. Disk Command df -Th # 显示磁盘挂在目录，以及文件系统 lsblk # displays block devices fdisk -l # 显示磁盘物理状态 3. 挂载 mount：直接输出所有的盘符挂载情况 mount [-t type] device dir: 将device挂载到目录dir上。如果dir是已经存在的有内容的目录，那么新挂载的盘会暂时替换原有的内容，这时候只需要使用命令 umount卸载disk即可。 4. fio fio documentation Storage Performance Benchmarking with fio 5. mount tmpfs cd mkdir tmp # 在自己的home 目录下创建一个 mount 到RAM 的 tmp folder sudo mount tmpfs ~/tmp/ -t tmpfs # mount -t tmpfs -o size=512m tmpfs /mnt/ram # 挂载一个 512MB 的memory 空间到 /mnt/ram 作为 ram 磁盘 # umount sudo umount ~/tmp 6. 关闭 ext4 journal # 格式化磁盘 hanson@u41@14:51:22:~ sudo mkfs.ext4 /dev/nvme0n1 mke2fs 1.44.1 (24-Mar-2018) Discarding device blocks: done Creating filesystem with 293028246 4k blocks and 73261056 inodes Filesystem UUID: 03727098-d292-4bb3-8d4c-c5ad157ec54e Superblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 4096000, 7962624, 11239424, 20480000, 23887872, 71663616, 78675968, 102400000, 214990848 ... # 查看是否开启日志 hanson@u41@14:53:52:~ sudo dumpe2fs /dev/nvme0n1 | grep 'Filesystem features' | grep 'has_journal' dumpe2fs 1.44.1 (24-Mar-2018) Filesystem features: has_journal ext_attr resize_inode dir_index filetype extent 64bit flex_bg sparse_super large_file huge_file dir_nlink extra_isize metadata_csum # 关闭日志 hanson@u41@14:53:52:~ sudo tune2fs -O ^has_journal /dev/nvme0n1 tune2fs 1.44.1 (24-Mar-2018) # 开启日志 hanson@u41@14:53:52:~ sudo tune2fs -O has_journal /dev/nvme0n1 7. IO 监控 参看 Linux下的IO监控与分析 7.1. 系统 IO 监控 iostat -xdmt 1 %util:代表磁盘繁忙程度。100% 表示磁盘繁忙, 0%表示磁盘空闲。但是注意,磁盘繁忙不代表磁盘(带宽)利用率高 argrq-sz:提交给驱动层的IO请求大小,一般不小于4K,不大于max(readahead_kb, max_sectors_kb). 可用于判断当前的IO模式,一般情况下,尤其是磁盘繁忙时, 越大代表顺序,越小代表随机 svctm: 一次IO请求的服务时间,对于单块盘,完全随机读时,基本在7ms左右,既寻道+旋转延迟时间 7.1.1. 注: 各统计量之间关系 ======================================= %util = ( r/s + w/s) * svctm / 1000 # 队列长度 = 到达率 * 平均服务时间 avgrq-sz = ( rMB/s + wMB/s) * 2048 / (r/s + w/s) # 2048 为 1M / 512 ======================================= 7.1.2. 总结: iostat 统计的是通用块层经过合并(rrqm/s, wrqm/s)后,直接向设备提交的IO数据,可以反映系统整体的IO状况,但是有以下2个缺点: 距离业务层比较遥远,跟代码中的write,read不对应(由于系统预读 + pagecache + IO调度算法等因素, 也很难对应) 是系统级,没办法精确到进程,比如只能告诉你现在磁盘很忙,但是没办法告诉你是谁在忙,在忙什么？ 7.2. 进程 IO iotop 顾名思义, io版的top pidstat 顾名思义, 统计进程(pid)的stat,进程的stat自然包括进程的IO状况 这两个命令,都可以按进程统计IO状况,因此可以回答你以下二个问题 当前系统哪些进程在占用IO,百分比是多少? 占用IO的进程是在读?还是在写?读写量是多少? pidstat 参数很多,仅给出几个个人习惯 pidstat -d 1 #只显示IO pidstat -u -r -d -t 1 # -d IO 信息, # -r 缺页及内存信息 # -u CPU使用率 # -t 以线程为统计单位 # 1 1秒统计一次 XS Zhao®Stay Foolish, Stay HungryCopyright © hansonzhao007 all right reserved, powered by aleen42modified at 2019-02-23 03:14:29 0 issues reported "},"content/linux/inode.html":{"url":"content/linux/inode.html","title":"inode","keywords":"","body":" `ls -i`：显示文件的inode `stat filename`：显示文件的所有状态信息，包括大小，inode id，link 数目，创建时间，修改时间等 如果有一个文件名很奇怪，无法使用正常的 rm 命令删除，比如：“ab* 那么可以使用 find . -inum xxxx -delete 命令删除 ln file1 filelink1：给file1创建一个名字叫做filelink1的hard link，具有相同的 inode id。加上参数 -s 则创建 softlink **[terminal] **[prompt mac@macs-MacBook]**[path ~]**[delimiter $ ]**[command ls -i] 4304576742 main.cpp **[prompt mac@macs-MacBook]**[path ~]**[delimiter $ ]**[command ln main.cpp t.c] **[prompt mac@macs-MacBook]**[path ~]**[delimiter $ ]**[command ls -i] 4304576742 main.cpp 4304576742 t.c df -i：查看磁盘inode资源的使用情况 XS Zhao®Stay Foolish, Stay HungryCopyright © hansonzhao007 all right reserved, powered by aleen42modified at 2018-08-08 05:41:57 0 issues reported "},"content/linux/mem.html":{"url":"content/linux/mem.html","title":"memory","keywords":"","body":"1. 查看 memory 型号2. Hugepage 使用2.1. kernel 准备2.2. 配置可以使用的 huge page 数目2.3. 在 C++ 里配置 hugepage2.4. Reference1. 查看 memory 型号 sudo lshw -short -C memory 2. Hugepage 使用 2.1. kernel 准备 为了使用 hugepage，首先 kernel 得支持。在编译 kernel 时候，配置 CONFIG_HUGETLBFS 选项。然后在 boot command line 里面，设置 hugepagesz=. 2.2. 配置可以使用的 huge page 数目 echo 20 > /proc/sys/vm/nr_hugepages cat /proc/meminfo | grep Huge AnonHugePages: 0 kB ShmemHugePages: 0 kB HugePages_Total: 20 HugePages_Free: 20 HugePages_Rsvd: 0 HugePages_Surp: 0 Hugepagesize: 2048 kB Hugetlb: 40960 kB 2.3. 在 C++ 里配置 hugepage 参看source code tools/testing/selftests/vm/map_hugetlb.c 2.4. Reference hugetlbpage How to force any Linux application to use Hugepages without modifying the source code How to allocate “huge” pages for C++ application on Linux XS Zhao®Stay Foolish, Stay HungryCopyright © hansonzhao007 all right reserved, powered by aleen42modified at 2019-01-02 04:23:24 0 issues reported "},"content/linux/network.html":{"url":"content/linux/network.html","title":"network","keywords":"","body":"1. remote port scan2. iptables SNAT sharing Internet3. ip scan4. dhcp1. remote port scan # signle port nc -zv 127.0.0.1 80 # multiple ports nc -zv 127.0.0.1 22 80 8080 # range of ports nc -zv 127.0.0.1 22 20-30 2. iptables SNAT sharing Internet # save this as config.sh sysctl -w net.ipv4.ip_forward=1 sysctl -p iptables -X iptables -t nat -X iptables -F iptables -t nat -F iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o eno2 -j SNAT --to-source 129.107.208.76 3. ip scan nmap -sP 10.0.0.* 4. dhcp hanson@u41@11:52:06:/etc/netctl ls eno1 examples hooks interfaces hanson@u41@11:52:07:/etc/netctl cat eno1 Description='A basic dhcp ethernet connection' Interface=eno1 Connection=ethernet IP=dhcp #Address=('129.107.116.236/23') #Gateway='129.107.116.1' #DNS=('129.107.35.89') #IP6=no #DHCPClient=dhcpcd #DHCPReleaseOnStop=no ## for DHCPv6 #IP6=dhcp #DHCP6Client=dhclient ## for IPv6 autoconfiguration #IP6=stateless systemctl restart dhcpcd.service # 做 mac 到 域名映射 sudo vim /etc/dhcp/dhcpd.conf # 设置 192.168.0.* 对应的域名 sudo vim /etc/bind/zones/db.192.168.0 # 绑定 seir* 对应的 ip 解析 sudo vim /etc/bind/zones/uta.edu.db # 重启 dhcp 服务 sudo /etc/init.d/isc-dhcp-server restart # 显示分配 ip 状态 sudo /etc/init.d/isc-dhcp-server status XS Zhao®Stay Foolish, Stay HungryCopyright © hansonzhao007 all right reserved, powered by aleen42modified at 2019-09-08 03:48:46 0 issues reported "},"content/linux/perf.html":{"url":"content/linux/perf.html","title":"perf","keywords":"","body":"1. 使用 Perf 分析指定函数的性能并可视化1.1. 使用的两个脚本1.1.1. sperf1.1.2. perfsvg1.2. 在函数内设置性能分析锚点1.3. 性能分析1.4. 生成可视图1.5. Perf 乱码1. 使用 Perf 分析指定函数的性能并可视化 1.1. 使用的两个脚本 1.1.1. sperf #!/bin/bash if [[ $# -eq 0 ]]; then echo \" Usage: sperf ...\" exit 0 fi perf record -q --call-graph lbr --switch-output -- \"$@\" 1.1.2. perfsvg #!/bin/bash if [[ $# -eq 0 ]]; then echo \" Usage: perfsvg ...\" exit 0 fi # get scripts ghroot=\"https://raw.githubusercontent.com/brendangregg/FlameGraph/master\" bindir=\"${HOME}/program/usr/bin\" st1=\"${bindir}/stackcollapse-perf.pl\" st2=\"${bindir}/flamegraph.pl\" if [[ ! -f \"${st1}\" ]]; then mkdir -p ~/program/usr/bin wget \"${ghroot}/stackcollapse-perf.pl\" -O \"${st1}\" fi if [[ ! -f \"${st2}\" ]]; then mkdir -p ~/program/usr/bin wget \"${ghroot}/flamegraph.pl\" -O \"${st2}\" fi rid=$(timestamp) pref=\"/tmp/.fperf-${rid}\" perf script -i \"${1}\" > ${pref}.perf perl -w \"${st1}\" ${pref}.perf > ${pref}.folded perl -w \"${st2}\" ${pref}.folded > fperf-${rid}.svg rm -f ${pref}.perf ${pref}.folded echo \"fperf-${rid}.svg 1.2. 在函数内设置性能分析锚点 static pid_t __perf_pid = 0; void debug_perf_ppid(void) { const pid_t ppid = getppid(); char tmp[1024]; sprintf(tmp, \"/proc/%d/cmdline\", ppid); FILE * const fc = fopen(tmp, \"r\"); const size_t nr = fread(tmp, 1, 1020, fc); fclose(fc); // look for \"perf record\" if (nr 0) kill(__perf_pid, SIGUSR2); } void debug_perf_stop(void) { if (__perf_pid > 0) kill(__perf_pid, SIGINT); } 1.3. 性能分析 #include \"road_hc_util.h\" #include \"road_sample.h\" #include #include #include #include using namespace rasi; MutableS2ShapeIndex road_index; const double kRepeat = 500000; static pid_t __perf_pid = 0; void debug_perf_ppid(void) { const pid_t ppid = getppid(); char tmp[1024]; sprintf(tmp, \"/proc/%d/cmdline\", ppid); FILE * const fc = fopen(tmp, \"r\"); const size_t nr = fread(tmp, 1, 1020, fc); fclose(fc); // look for \"perf record\" if (nr 0) kill(__perf_pid, SIGUSR2); } void debug_perf_stop(void) { if (__perf_pid > 0) kill(__perf_pid, SIGINT); } vector> initial() { // std::ifstream file(\"../GPS_2016_11_01\"); // CSVRow row; LoadRoadIndex(road_index, \"../shenzhen_split_edges.json\"); vector> samples(2); for(auto& s : samples) { s = pair{23.028605, 114.8476}; } return samples; } void near(vector>& samples){ S2ClosestEdgeQuery::Options options; options.set_max_edges(1); S2ClosestEdgeQuery query(&road_index,options); S2ClosestEdgeQuery::PointTarget target_edge(S2Point(S2LatLng::FromDegrees(samples[0].first, samples[0].second))); auto started = std::chrono::high_resolution_clock::now(); debug_perf_switch(); for (int i = 0; i (done-started).count()/kRepeat > samples = initial(); near(samples); std::cout 1.4. 生成可视图 对生成的 perf.data 文件，使用命令： perfsvg perf.data.2018071020563854 1.5. Perf 乱码 echo 0 > /proc/sys/kernel/kptr_restrict XS Zhao®Stay Foolish, Stay HungryCopyright © hansonzhao007 all right reserved, powered by aleen42modified at 2019-02-12 01:52:23 0 issues reported "},"content/linux/ssh.html":{"url":"content/linux/ssh.html","title":"ssh","keywords":"","body":"1. 内网穿透1.1. Transparent Multi-Hop1.2. ProxyCommand with -W1.3. Local Port Forwarding2. VPN 代理2.1. How to use a SOCKS Proxy 端口转发3. Kill all old ssh connection4. List old ssh1. 内网穿透 # --------------- --------------- ------------------- # | SSH client |==========| Jump host |----------| Target server | # --------------- --------------- ------------------- # WAN IP:129.107.35.245 LAN IP:10.0.0.30 1.1. Transparent Multi-Hop reference # 相当于 SSH client 链接到 Jump host 以后，再从 Jump host ssh 链接到 Target server # 有多少次跳转就要输入多少次密码 ssh -A -t hanson@129.107.35.245 ssh -A -t hanson@10.0.0.30 1.2. ProxyCommand with -W # 该方法需要在 Jump host 和 Target server 上的.ssh目录中的 authorized_keys # ----------------------------------------------------------------- # 1. proxy server configuration # ----------------------------------------------------------------- Host jump_host hostname 129.107.35.245 user hanson # ----------------------------------------------------------------- # 2. Set Jump host proxy # ----------------------------------------------------------------- Host uhead Host u30 HostName 10.0.0.30 ProxyCommand ssh -q -W %h:%p uhead user hanson # 之后直接在 SSH client 上 ssh u30 就可以登录到 Target server 了。 1.3. Local Port Forwarding # 该方法需要在 Jump host 上运行下面的 ssh 命令，然后 SSH client 在指定的端口进行 # ssh 链接，才能访问到 Target server. 该方法并不需要添加 public key，只要用户密码 # 需要注意的是，在`本机的 authorized_key` 里面必须把`自己的 ssh public key 添加进去`。 # 1.run command in Jump host: ssh -2fnNT -L 129.107.35.245:8888:10.0.0.30:22 # Then we can see a port forwarding thread: # [hanson@uhead ~]$ ss -tnl # LISTEN 0 128 129.107.35.245:8888 0.0.0.0:* # 2.ssh Jump host with specified port in SSH client ssh xxz1499@129.107.35.245 -p 8888 xxz1499@129.107.35.245 password: # After login, we are in Target server. # 该方法的好处是：比如我在 Target server 新建了 N 个学生账户，那么并不需要修改 Host server， # 在 SSH client 处登录时候，只需要修改相应的 user name 即可。 2. VPN 代理 2.1. How to use a SOCKS Proxy 端口转发 # ssh -D # ================== # 1. 本地机器配置 # a) 在本地创建 ssh key，然后在 server 端添加该 key。比如 hanson user 的 key # b) 在本地设置 ssh 转发 tunnel。下面相当于把对本地 9999 端口的访问转发到了翻墙服务器上 # # -D: Tells SSH that we want a SOCKS tunnel on the specified port number (you can choose a number between 1025-65536) # -f: Forks the process to the background # -C: Compresses the data before sending it # -q: Uses quiet mode # -N: Tells SSH that no command will be sent once the tunnel is up # ================== ssh -2fnNT -D 9999 hanson@141.217.24.182 # ================== # 2. 在 firefox 里面设置 proxy # Manual proxy configuration: # SOCKS Host: localhost Port:9999 # ================== 3. Kill all old ssh connection kill $(who -la | grep old | grep -o '\\bold *[0-9]*' | grep -o '[0-9]*') 4. List old ssh who -la XS Zhao®Stay Foolish, Stay HungryCopyright © hansonzhao007 all right reserved, powered by aleen42modified at 2018-09-13 09:17:20 0 issues reported "},"content/linux/skills.html":{"url":"content/linux/skills.html","title":"skills","keywords":"","body":"1. rename 重命名2. 批量创建用户3. Batch grading4. 批量 grade homework5. DD 命令创建U盘启动盘6. Compile kernel6.1. prepare6.2. compile6.3. change bootloader7. linux default to text mode8. linux kernel change9. screen 命令10. cpufreq-set all11. Cgroups12. 查看打开几个文件13. replace swap file1. rename 重命名 # 这里使用 cut 命令截取文件名中想要的一段字符，然后再尾部添加 .s 共同构成新的文件名。 for name in *.s do # 取出第 11 到 17 的字符，并和 \".s\" 拼接在一起 newname=\"$(echo \"$name\" | cut -c 11-17)\".s mv \"$name\" \"$newname\" done 使用指定变量名： # 从 var 变量名的右边开始匹配，并删除 pattern 匹配的部分 # var: task1.c # ${var%.c}: 去除 \".c\" 后缀 ${var%pattern} 2. 批量创建用户 newusers batchuserfile # batchuserfile # pw_name:pw_passwd:pw_uid:pw_gid:pw_gecos:pw_dir:pw_shell phc8166:phc8166::::/stu/phc8166:/bin/bash tvd6298:tvd6298::::/stu/tvd6298:/bin/bash sxg8183:sxg8183::::/stu/sxg8183:/bin/bash rxs9961:rxs9961::::/stu/rxs9961:/bin/bash axs7268:axs7268::::/stu/axs7268:/bin/bash kxt4593:kxt4593::::/stu/kxt4593:/bin/bash safal:safal::::/stu/safal:/bin/bash 3. Batch grading test=(\"Saving correctly!\" \"file1.txt file2.txt merged_file.txt\" \"append.txt 2 line1 line2\") i=0 for src in *.c; do printf \"************ task $((i + 2)) ************\\n\" gcc -w $src ./a.out 4. 批量 grade homework test=(\"2 a 100 b 90\" \"3 1 2 3\" \"3 4 5 6\" \"5 1 2 3 4 5\" \" 4 1 2 3 4 3\") i=0 for src in *.c; do printf \"************ task $((i + 2)) ************\\n\" gcc -w $src ./a.out 5. DD 命令创建U盘启动盘 diskutil list: 输出挂载 U 盘信息 diskutil umountDisk disk4: 卸载U盘 使用dd命令将下载的Ubuntu Linux镜像恢复到U盘上。一定注意不要把磁盘写错了。不然哭死。 sudo dd if=/Users/sky/Downloads/ISO/ubuntu-17.10-desktop-amd64.iso of=/dev/disk4 bs=50m # mac brew install coreutils sudo gdd if=Downloads/archlinux-2018.10.01-x86_64\\(1\\).iso of=/dev/disk2 status=progress 完整的输出信息： ~ % diskutil umountDisk disk4 Unmount of all volumes on disk4 was successful ~ % sudo dd if=/Users/sky/Downloads/ISO/ubuntu-17.10-desktop-amd64.iso of=/dev/disk4 status=\"progress\" Password: 1431+1 records in 1431+1 records out 1501102080 bytes transferred in 906.101477 secs (1656660 bytes/sec) 6. Compile kernel 6.1. prepare sudo apt update sudo apt install bison flex sudo apt install build-essential sudo apt install libncurses5-dev sudo apt install fakeroot libssl-dev sudo apt install libelf-dev # go to linux source folder # copy config file to current folder cp /boot/config-$(uname -r) .config make menuconfig # 打开可视化菜单 # 选择 load→OK→Save→OK→EXIT→EXIT 6.2. compile # compile iso sudo make -j32 # compile modules make modules -j32 # install modules make modules_install # install kernel make install 6.3. change bootloader sudo update-grub 7. linux default to text mode edit /etc/default/grub GRUB_CMDLINE_LINUX_DEFAULT=\"text\" GRUB_TERMINAL=console saving those change: sudo update-grub sudo systemctl set-default multi-user.target 8. linux kernel change grep -A100 submenu /boot/grub/grub.cfg |grep menuentry submenu 'Advanced options for Ubuntu' $menuentry_id_option 'gnulinux-advanced-4a67ec61-9cd5-4a26-b00f-9391a34c8a29' { menuentry 'Ubuntu, with Linux 4.4.0-1062-aws' --class ubuntu --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-4.4.0-1062-aws-advanced-4a67ec61-9cd5-4a26-b00f-9391a34c8a29' { menuentry 'Ubuntu, with Linux 4.4.0-1062-aws (recovery mode)' --class ubuntu --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-4.4.0-1062-aws-recovery-4a67ec61-9cd5-4a26-b00f-9391a34c8a29' { menuentry 'Ubuntu, with Linux 4.4.0-1061-aws' --class ubuntu --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-4.4.0-1061-aws-advanced-4a67ec61-9cd5-4a26-b00f-9391a34c8a29' { menuentry 'Ubuntu, with Linux 4.4.0-1061-aws (recovery mode)' --class ubuntu --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-4.4.0-1061-aws-recovery-4a67ec61-9cd5-4a26-b00f-9391a34c8a29' { menuentry 'Ubuntu, with Linux 4.4.0-131-generic' --class ubuntu --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-4.4.0-131-generic-advanced-4a67ec61-9cd5-4a26-b00f-9391a34c8a29' { menuentry 'Ubuntu, with Linux 4.4.0-131-generic (recovery mode)' --class ubuntu --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-4.4.0-131-generic-recovery-4a67ec61-9cd5-4a26-b00f-9391a34c8a29' { ind the ids of parent and child menu entries. For example, menu entry id for Advanced options for Ubuntu is gnulinux-advanced-4a67ec61-9cd5-4a26-b00f-9391a34c8a29 menu entry for Ubuntu, with Linux 4.4.0-131-generic is gnulinux-4.4.0-131-generic-recovery-4a67ec61-9cd5-4a26-b00f-9391a34c8a29 vim /etc/default/grub replace GRUB_DEFAULT with above value (With Quotes) GRUB_DEFAULT=\"gnulinux-advanced-4a67ec61-9cd5-4a26-b00f-9391a34c8a29>gnulinux-4.4.0-131-generic-recovery-4a67ec61-9cd5-4a26-b00f-9391a34c8a29\" GRUB_HIDDEN_TIMEOUT=0 GRUB_HIDDEN_TIMEOUT_QUIET=true GRUB_TIMEOUT=0 GRUB_DISTRIBUTOR=`lsb_release -i -s 2> /dev/null || echo Debian` GRUB_CMDLINE_LINUX_DEFAULT=\"console=tty1 console=ttyS0\" GRUB_CMDLINE_LINUX=\"\" sudo update-grub sudo reboot 9. screen 命令 # 创建 screen screen -S hanson # 列出所有 screen screen -ls # 返回 screen. id 是 ls cmd 显示 出来的对应screen screen -r id 10. cpufreq-set all #!/bin/bash MAX_CPU=$((`nproc --all` - 1)) for i in $(seq 0 $MAX_CPU); do echo \"Changing CPU \" $i \" with parameter \"$@; cpufreq-set -c $i $@ ; done cpufreq-set-all -g powersave 11. Cgroups Linux Cgroup系列（04）：限制cgroup的内存使用（subsystem之memory） 12. 查看打开几个文件 lsof -a -p 763[pid] 13. replace swap file # Adding a swap file sudo dd if=/dev/zero of=/mnt/ssd/swapfile bs=1G count=4 sudo chmod 600 /mnt/ssd/swapfile sudo mkswap /mnt/ssd/swapfile sudo swapon /mnt/ssd/swapfile sudo swapoff -v /swapfile XS Zhao®Stay Foolish, Stay HungryCopyright © hansonzhao007 all right reserved, powered by aleen42modified at 2020-04-17 09:15:02 0 issues reported "},"content/python/pandas.html":{"url":"content/python/pandas.html","title":"pandas","keywords":"","body":"1. concat two dataframes without losing the column headers2. 重置 index3. 重置 column name 为另一个 dataframe 的 column names4. 挑选行列1. concat two dataframes without losing the column headers As stated in merge, join, and concat documentation, ignore index will remove all name references and use a range (0...n-1) instead. So it should give you the result you want once you remove ignore_index argument or set it to false (default). df = pd.concat([df, df2], axis=1) This will join your df and df2 based on indexes (same indexed rows will be concatenated, if other dataframe has no member of that index it will be concatenated as nan). 2. 重置 index df.reset_index(drop=True) 3. 重置 column name 为另一个 dataframe 的 column names df1.columns = df2.columns[:].tolist() 4. 挑选行列 pick = [1,4,6,8] df.ix[pick] # 挑选行 df.iloc[:, 0:150:5] # 前面代表选择所有列，后面代表选择从 0 到 150 行，每隔5个取一个 XS Zhao®Stay Foolish, Stay HungryCopyright © hansonzhao007 all right reserved, powered by aleen42modified at 2018-12-06 13:48:53 0 issues reported "},"content/web/gitbook.html":{"url":"content/web/gitbook.html","title":"Gitbook","keywords":"","body":"1. Install & initial a gitbook1.1. Install Gitbook1.2. Install gulp and yarn1.3. Using plugin2. Using gulp2.1. Compress html2.2. One example2.3. Publish static website to github pages3. 安装插件1. Install & initial a gitbook 1.1. Install Gitbook npm install -g gitbook-cli git init gitbook-test cd gitbook-test gitbook init 1.2. Install gulp and yarn npm install -g gulp npm install -g yarn npm install --save gulp-htmlmin # used to compress html yarn add gulp gulp-gh-pages gulp-load-plugins --dev # used to publish static page to github yarn init # this will create package.json file 1.3. Using plugin create book.json file. { \"root\": \"./\", // web root directory \"title\": \"cheatsheet\", \"author\": \"XS Zhao\", \"plugins\": [\"prism\", \"-highlight\", \"addcssjs\", \"anchor-navigation-ex\" ], // the plugin you want to use \"pluginsConfig\": { \"addcssjs\": { \"js\": [\"./custom/my.js\"], \"css\": [\"./custom/my.css\"] } } } in the plugins fields, add the plugins your want. Then gitbook install mac@macs-MacBook  ~/Project/test  gitbook install info: installing 3 plugins using npm@3.9.2 info: info: installing plugin \"prism\" info: install plugin \"prism\" (*) from NPM with version 2.3.0 fetchMetadata → network ▀ ╢███████████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░╟ 2. Using gulp Create a new file called gulpfile.js. 2.1. Compress html reference Add following code in gulpfile.js: var gulp = require('gulp'); var htmlmin = require('gulp-htmlmin'); // Compress the html gulp.task('minify', function() { return gulp.src('./_book/**/*.html') .pipe(htmlmin({collapseWhitespace: true})) .pipe(gulp.dest('./_book/')); }); usage: gulp minify 2.2. One example /* npm install 超时请使用：(两条命令在当前文件目录下执行) npm config set registry https://registry.npm.taobao.org npm install 或者： npm install -g cnpm --registry=https://registry.npm.taobao.org cnpm install */ var gulp = require('gulp'); var debug = require('gulp-debug'); var cleancss = require('gulp-clean-css'); //css压缩组件 var cssversion = require('gulp-make-css-url-version'); //css资源添加版本号 var uglify = require('gulp-uglify'); //js压缩组件 var htmlmin = require('gulp-htmlmin'); //html压缩组件 var htmlclean = require('gulp-htmlclean'); //html清理组件 var image = require('gulp-image'); //图片压缩 var assetRev = require('gulp-asset-rev'); //版本控制插件 var runSequence = require('run-sequence'); //异步执行组件 var changed = require('gulp-changed'); //文件更改校验组件 var gulpif = require('gulp-if') //任务 帮助调用组件 var plumber = require('gulp-plumber'); //容错组件（发生错误不跳出任务，并报出错误内容） var isScriptAll = true; //是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件) var isDebug = true; //是否调试显示 编译通过的文件 // 压缩js文件 gulp.task('compressJs', function () { var option = { // preserveComments: 'all',//保留所有注释 mangle: true, //类型：Boolean 默认：true 是否修改变量名 compress: true //类型：Boolean 默认：true 是否完全压缩 } return gulp.src(['./public/**/*.js','!./public/**/*.min.js']) //排除的js .pipe(gulpif(!isScriptAll, changed('./public'))) .pipe(gulpif(isDebug,debug({title: 'Compress JS:'}))) .pipe(plumber()) .pipe(uglify(option)) //调用压缩组件方法uglify(),对合并的文件进行压缩 .pipe(gulp.dest('./public')); //输出到目标目录 }); // 压缩css文件 gulp.task('compressCss', function () { return gulp.src('./public/**/*.css') .pipe(gulpif(!isScriptAll, changed('./public'))) .pipe(gulpif(isDebug,debug({title: 'Compress CSS:'}))) .pipe(plumber()) .pipe(cleancss({rebase: false})) .pipe(gulp.dest('./public')); }); // 压缩图片 gulp.task('compressImage', function () { gulp.src('./public/**/*.png') .pipe(image()) .pipe(gulp.dest('./public')); }); // 压缩html文件 gulp.task('compressHtml', function () { var cleanOptions = { protect: //g, //忽略处理 unprotect: /]*\\btype=\"text\\/x-handlebars-template\"[\\s\\S]+?/ig //特殊处理 } var minOption = { collapseWhitespace: true, //压缩HTML collapseBooleanAttributes: true, //省略布尔属性的值 ==> removeEmptyAttributes: true, //删除所有空格作属性值 ==> removeScriptTypeAttributes: true, //删除的type=\"text/javascript\" removeStyleLinkTypeAttributes: true,//删除和的type=\"text/css\" removeComments: true, //清除HTML注释 minifyJS: true, //压缩页面JS minifyCSS: true, //压缩页面CSS minifyURLs: true //替换页面URL }; return gulp.src('./public/**/*.html') .pipe(gulpif(isDebug,debug({title: 'Compress HTML:'}))) .pipe(plumber()) .pipe(htmlclean(cleanOptions)) .pipe(htmlmin(minOption)) .pipe(gulp.dest('./public')); }); // 默认任务 gulp.task('default', function () { runSequence.options.ignoreUndefinedTasks = true; runSequence('compressHtml','compressCss','compressImage'); //,'compressJs'); }); 2.3. Publish static website to github pages reference Add following code: const gulp = require('gulp'); const gulpLoadPlugins = require('gulp-load-plugins'); const $ = gulpLoadPlugins(); // Publishes the site to GitHub Pages gulp.task('publish', () => { console.log('Publishing to GH Pages'); return gulp.src('./_book/**/*') .pipe($.ghPages({ origin: 'origin', branch: 'gh-pages' })); }); usage: gulp publish 3. 安装插件 插件推荐 XS Zhao®Stay Foolish, Stay HungryCopyright © hansonzhao007 all right reserved, powered by aleen42modified at 2018-08-08 05:56:11 0 issues reported "},"content/vim.html":{"url":"content/vim.html","title":"Vim","keywords":"","body":"1. ctags1. ctags 安装版本应该是 exuberant ctags # 从当前目录递归生成ctag ctags -R * # 在vim里设置 set tags=./tags,tags;$HOME # 从当前目录搜索 ctags 文件，直到 home 目录。 XS Zhao®Stay Foolish, Stay HungryCopyright © hansonzhao007 all right reserved, powered by aleen42modified at 2018-11-02 23:12:26 0 issues reported "}}